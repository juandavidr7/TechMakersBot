from app.services.llm_provider import llm
from langchain.prompts import PromptTemplate
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.docstore.document import Document

from app.services.products_service import ProductService  # ‚úÖ Importamos ProductService


class ChatbotService:
    def __init__(self, product_service: ProductService):
        """Inicializa la base de datos de embeddings con los productos existentes"""
        print("‚úÖ Inicializando ChatbotService...")
        self.product_service = product_service  # ‚úÖ Usamos ProductService para obtener productos
        try:
            self.embeddings = OpenAIEmbeddings()
            self.vector_db = None
            print("‚úÖ Embeddings inicializados correctamente.")

            # Intentar crear la base de datos de vectores con los productos disponibles
            if not self.createVectorDB():
                print("‚ö†Ô∏è No se pudo inicializar la base de datos de vectores.")
        except Exception as e:
            print(f"üö® ERROR en la inicializaci√≥n de ChatbotService: {e}")

    def createVectorDB(self):
        """Crea una base de datos de b√∫squeda basada en embeddings de productos"""
        print("üîç Creando base de datos de vectores...")
        try:
            products = self.product_service.get_all_products()  # ‚úÖ Obtenemos productos desde ProductService
            if not products:
                print("‚ö†Ô∏è No se encontraron productos. No se cre√≥ la base de datos de embeddings.")
                return False

            docs = [
                Document(
                    page_content=f"{p['brand']} {p['name']} - {p['description']}",
                    metadata={"id": p["id"], "price": p["price"], "stock": p["stock"], "brand": p["brand"]}
                )
                for p in products
            ]
            print(f"‚úÖ Se crearon {len(docs)} documentos para FAISS.")
            self.vector_db = FAISS.from_documents(docs, self.embeddings)
            print("‚úÖ Base de datos de vectores creada correctamente.")
            return True
        except Exception as e:
            print(f"üö® ERROR en createVectorDB: {e}")
            return False

    def findRelevantProducts(self, query: str, top_k=3):
        """Busca los productos m√°s relevantes bas√°ndose en la consulta"""
        print(f"üîç Buscando productos relevantes para: '{query}'")
        try:
            if not self.vector_db:
                print("‚ö†Ô∏è Base de datos de vectores no encontrada. Intentando crearla...")
                if not self.createVectorDB():
                    return []

            results = self.vector_db.similarity_search(query, k=top_k)
            print(f"‚úÖ Se encontraron {len(results)} productos relevantes.")
            return results
        except Exception as e:
            print(f"üö® ERROR en findRelevantProducts: {e}")
            return []

    def askBasedOnCurrentProducts(self, query: str) -> str:
        """Genera una respuesta basada en productos relevantes"""
        print(f"üîç Generando respuesta para la consulta: '{query}'")
        try:
            relevant_products = self.findRelevantProducts(query)
            if not relevant_products:
                print("‚ö†Ô∏è No se encontraron productos relevantes.")
                return "Lo siento, no encontr√© productos relacionados con tu b√∫squeda."

            product_info = "\n".join([
                f"Marca: {doc.metadata['brand']}\n"
                f"Modelo: {doc.page_content.split('-')[0].strip()}\n"
                f"Precio: ${doc.metadata['price']}\n"
                f"Stock disponible: {doc.metadata['stock']} unidades\n"
                f"Descripci√≥n: {doc.page_content.split('-')[1].strip()}\n"
                for doc in relevant_products
            ])

            template = PromptTemplate(
                input_variables=["query", "product_info"],
                template=(
                    "Eres un asistente virtual de ventas de 'Makers Tech', una tienda especializada en tecnolog√≠a. "
                    "Tu tarea es ayudar a los clientes a encontrar la mejor computadora seg√∫n sus necesidades, "
                    "ofreciendo informaci√≥n precisa y en tiempo real sobre el inventario, caracter√≠sticas y precios de los productos disponibles.\n\n"

                    "Inventario Relevante:\n"
                    "{product_info}\n\n"

                    "Reglas para responder:\n"
                    "- Usa un tono profesional, amigable y personalizado.\n"
                    "- Si el usuario pregunta por disponibilidad, informa cu√°ntas computadoras hay en total y cu√°ntas de cada marca.\n"
                    "- Si el usuario pregunta por un modelo espec√≠fico, proporciona detalles sobre sus caracter√≠sticas, precio y stock.\n"
                    "- Si el usuario quiere comparar productos, muestra diferencias clave y sugiere opciones seg√∫n el uso (gaming, trabajo, etc.).\n"
                    "- No inventes productos ni proporciones informaci√≥n fuera del inventario.\n"
                )
            )

            prompt = template.format(query=query, product_info=product_info)
            print(f"üîπ Enviando consulta a LLM:\n{prompt}")

            response = llm.generateResponseDependsModel(prompt)
            print(f"ü§ñ Respuesta del chatbot:\n{response}")
            return response

        except Exception as e:
            print(f"üö® ERROR en askBasedOnCurrentProducts: {e}")
            return "Lo siento, hubo un error al procesar tu consulta."
